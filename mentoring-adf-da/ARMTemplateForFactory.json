{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "mentoring-adf-da"
		},
		"LS_ABLB_azurementoringauda_movies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ABLB_azurementoringauda_movies'"
		},
		"LS_ASQL_DataMart_adf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_DataMart_adf'"
		},
		"LS_ASQL_cinematickets_adf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_cinematickets_adf'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=EPGETBIW03F1\\MSSQLSERVER2022;Initial Catalog=CinemaTickets;User ID=adf;TrustServerCertificate=True"
		},
		"LS_ASQL_movies_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_movies'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-da.database.windows.net;Initial Catalog=movies;User ID=ms-admin"
		},
		"LS_ASQL_movies_adf_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASQL_movies_adf'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=azure-mentoring-da.database.windows.net;Initial Catalog=movies;User ID=adf"
		},
		"LS_ABLB_azurementoringdatalakeda_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://azurementoringdatalakeda.blob.core.windows.net/"
		},
		"LS_ABLB_azurementoringstorageda_movies_properties_typeProperties_sasUri_secretName": {
			"type": "string",
			"defaultValue": "secret-azurementoringstorageda-movies"
		},
		"LS_ABLB_azurementoringstorageda_online_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'LS_ABLB_azurementoringstorageda_online'"
		},
		"LS_ABLB_azurementoringstorageda_online_properties_typeProperties_sasToken_secretName": {
			"type": "string",
			"defaultValue": "secret-azurementoringstorageda-online"
		},
		"LS_ABLB_azurementoringstorageda_tmp_sasUri": {
			"type": "secureString",
			"metadata": "Secure string for 'sasUri' of 'LS_ABLB_azurementoringstorageda_tmp'"
		},
		"LS_AKV_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://mentoring-key-vault-da.vault.azure.net/"
		},
		"cdc_trigger_properties_pipeline_parameters_triggerStartTime": {
			"type": "string",
			"defaultValue": "@formatDateTime(trigger().outputs.windowStartTime,'yyyy-MM-dd HH:mm:ss.fff')"
		},
		"cdc_trigger_properties_pipeline_parameters_triggerEndTime": {
			"type": "string",
			"defaultValue": "@formatDateTime(trigger().outputs.windowEndTime,'yyyy-MM-dd HH:mm:ss.fff')"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_LKP_GetMetadata",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Fail1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from etl.tControlMetadata\nwhere CopyEnabled = 1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_etl_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACT_ITRC_FOR_CopyRawToStg",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GEN_LKP_GetMetadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ACT_MT_Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILENAME"
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": {
													"value": "@json(item().CopySourceSettings).recursive",
													"type": "Expression"
												},
												"wildcardFolderPath": {
													"value": "@json(item().SourceObjectSettings).folderPath",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@json(item().CopySourceSettings).wildcardFileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": {
													"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": {
													"value": "@json(item().CopySourceSettings).skipLineCount",
													"type": "Expression"
												}
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@json(item().CopySinkSettings).preCopyScript",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@json(item().DataLoadingBehaviorSettings).DIUValue",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().CopyActivitySettings).translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_raw_metadatadriven",
											"type": "DatasetReference",
											"parameters": {
												"columnDelimiter": "@json(item().SourceObjectSettings).columnDelimiter",
												"escapeChar": "@json(item().SourceObjectSettings).escapeChar",
												"quoteChar": "@json(item().SourceObjectSettings).quoteChar",
												"firstRowAsHeader": "@json(item().SourceObjectSettings).firstRowAsHeader",
												"container": "@json(item().SourceObjectSettings).container"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_dbo_MetadataDriven",
											"type": "DatasetReference",
											"parameters": {
												"table": "@json(item().SinkObjectSettings).table",
												"schema": "@json(item().SinkObjectSettings).schema"
											}
										}
									]
								},
								{
									"name": "ACT_GEN_SPRC_LogMain",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ACT_MT_Copy",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spPopulateLogs]",
										"storedProcedureParameters": {
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": "Copy Activity",
												"type": "String"
											},
											"BillingInfo": {
												"value": {
													"value": "@if(\n    equals(activity('ACT_MT_Copy').Status, 'Succeeded'),\n    concat(\n        '{\"billingReference\":',\n        activity('ACT_MT_Copy').output.billingReference,\n        '}'\n    ),\n    '-1'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionStatistics": {
												"value": {
													"value": "@if(\n    equals(activity('ACT_MT_Copy').Status, 'Succeeded'),\n    concat(\n        '{\"filesRead\":\"',\n        activity('ACT_MT_Copy').output.filesRead,\n        '\",\"rowsRead\":\"',\n        activity('ACT_MT_Copy').output.rowsRead,\n        '\",\"rowsCopied\":\"',\n        activity('ACT_MT_Copy').output.rowsCopied,\n        '\",\"usedDataIntegrationUnits\":\"',\n        activity('ACT_MT_Copy').output.usedDataIntegrationUnits,\n        '\",\"usedParallelCopies\":\"',\n        activity('ACT_MT_Copy').output.usedParallelCopies,'\"}'\n    ),\n    '-1'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@if(\n    equals(activity('ACT_MT_Copy').Status, 'Succeeded'),\n    concat(\n        '{\"executionStart\":\"',\n        activity('ACT_MT_Copy').output.executionDetails[0].start,\n        '\",\"executionStatus\":\"',\n        activity('ACT_MT_Copy').output.executionDetails[0].status,\n        '\",\"executionQueueDuration\":\"',\n        activity('ACT_MT_Copy').output.executionDetails[0].profile.queue.duration,\n        '\",\"executionTransferDuration\":\"',\n        activity('ACT_MT_Copy').output.executionDetails[0].profile.transfer.duration,\n        '\",\"copyDuration\":\"',\n        activity('ACT_MT_Copy').output.copyDuration,'\"}'\n    ),\n    '-1'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutioinStatus": {
												"value": {
													"value": "@if(\n    equals(activity('ACT_MT_Copy').Status, 'Succeeded'),\n    'Succeeded',\n    'Failed'\n)",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "isSuccessed",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "ACT_GEN_SPRC_LogMain",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('ACT_MT_Copy').Status, 'Succeeded')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "ACT_GEN_SPRC_LogFailure",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[spPopulateLogsErrorDetails]",
													"storedProcedureParameters": {
														"ActivityName": {
															"value": "Copy Activity",
															"type": "String"
														},
														"ErrorCode": {
															"value": {
																"value": "@activity('ACT_MT_Copy').error.ErrorCode",
																"type": "Expression"
															},
															"type": "String"
														},
														"ErrorMessage": {
															"value": {
																"value": "@activity('ACT_MT_Copy').error.Message",
																"type": "Expression"
															},
															"type": "String"
														},
														"ErrorTimestamp": {
															"value": {
																"value": "@utcnow()",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"FailureType": {
															"value": {
																"value": "@activity('ACT_MT_Copy').error.failureType",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineName": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"PipelineRunId": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_ASQL_movies",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "WriteLogToADLS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_ITRC_FOR_CopyRawToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n'select * from etl.tLogs where PipelineRunId = ''',\npipeline().RunId,\n''''\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_etl_tLogs",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_log",
								"type": "DatasetReference",
								"parameters": {
									"folderPath": "metadata-driven",
									"filename": {
										"value": "@concat(\n    formatDateTime(utcnow(),'yyyyMMddhhmmss'),\n    '_',\n    pipeline().RunId,\n    '.txt')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"message": "ThisIsACustomFailActitivy",
							"errorCode": "404"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "MetadataDriven"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2024-06-08T17:07:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_etl_tControlMetadata')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_etl_tLogs')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_log')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_metadatadriven')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_MetadataDriven')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exec_MetadataDriven",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "MetadataDriven",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "SendEmail",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "GetURL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@activity('GetURL').output.value",
								"type": "Expression"
							},
							"body": {
								"runId": "@{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}",
								"pipelineStatus": "@{activity('Exec_MetadataDriven').status}",
								"error": "@{activity('Exec_MetadataDriven').error}"
							}
						}
					},
					{
						"name": "GetURL",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Exec_MetadataDriven",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat(\n    pipeline().globalParameters.logicAppSendEmailUrl,\n    '?api-version=7.0'\n)",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "dzmitry_akulich1@epam.com"
					}
				},
				"variables": {
					"tmp2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "MetadataDriven"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-08T16:20:47Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/MetadataDriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MetadataDriven_old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline will count the total number of objects (tables etc.) required to be copied in this run, come up with the number of sequential batches based on the max allowed concurrent copy task, and then execute another pipeline to copy different batches sequentially.",
				"activities": [
					{
						"name": "ACT_GEN_LKP_GetMetadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from etl.tControlMetadata\nwhere CopyEnabled = 1;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_etl_tControlMetadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ACT_ITRC_FOR_CopyRawToStg",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ACT_GEN_LKP_GetMetadata').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "ACT_MT_Copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"additionalColumns": [
												{
													"name": "pipelineId",
													"value": {
														"value": "@pipeline().RunId",
														"type": "Expression"
													}
												},
												{
													"name": "source_filename",
													"value": "$$FILENAME"
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": {
													"value": "@json(item().CopySourceSettings).recursive",
													"type": "Expression"
												},
												"wildcardFolderPath": {
													"value": "@json(item().SourceObjectSettings).folderPath",
													"type": "Expression"
												},
												"wildcardFileName": {
													"value": "@json(item().CopySourceSettings).wildcardFileName",
													"type": "Expression"
												},
												"enablePartitionDiscovery": {
													"value": "@json(item().CopySourceSettings).enablePartitionDiscovery",
													"type": "Expression"
												}
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings",
												"skipLineCount": {
													"value": "@json(item().CopySourceSettings).skipLineCount",
													"type": "Expression"
												}
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@json(item().CopySinkSettings).preCopyScript",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"dataIntegrationUnits": {
											"value": "@json(item().DataLoadingBehaviorSettings).DIUValue",
											"type": "Expression"
										},
										"translator": {
											"value": "@json(item().CopyActivitySettings).translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_raw_metadatadriven",
											"type": "DatasetReference",
											"parameters": {
												"columnDelimiter": "@json(item().SourceObjectSettings).columnDelimiter",
												"escapeChar": "@json(item().SourceObjectSettings).escapeChar",
												"quoteChar": "@json(item().SourceObjectSettings).quoteChar",
												"firstRowAsHeader": "@json(item().SourceObjectSettings).firstRowAsHeader",
												"container": "@json(item().SourceObjectSettings).container"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_dbo_MetadataDriven",
											"type": "DatasetReference",
											"parameters": {
												"table": "@json(item().SinkObjectSettings).table",
												"schema": "@json(item().SinkObjectSettings).schema"
											}
										}
									]
								},
								{
									"name": "ACT_GEN_SPRC_LogMainSuccess",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ACT_MT_Copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spPopulateLogs]",
										"storedProcedureParameters": {
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": "Copy Activity",
												"type": "String"
											},
											"BillingInfo": {
												"value": {
													"value": "@concat(\n    '{\"billingReference\":',activity('ACT_MT_Copy').output.billingReference,'}'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionStatistics": {
												"value": {
													"value": "@concat(\n    '{\"filesRead\":\"',activity('ACT_MT_Copy').output.filesRead,\n    '\",\"rowsRead\":\"',\n    activity('ACT_MT_Copy').output.rowsRead,\n    '\",\"rowsCopied\":\"',\n    activity('ACT_MT_Copy').output.rowsCopied,\n    '\",\"usedDataIntegrationUnits\":\"',\n    activity('ACT_MT_Copy').output.usedDataIntegrationUnits,\n    '\",\"usedParallelCopies\":\"',\n    activity('ACT_MT_Copy').output.usedParallelCopies,'\"}'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutionDetails": {
												"value": {
													"value": "@concat(\n    '{\"executionStart\":\"',activity('ACT_MT_Copy').output.executionDetails[0].start,\n    '\",\"executionStatus\":\"',\n    activity('ACT_MT_Copy').output.executionDetails[0].status,\n    '\",\"executionQueueDuration\":\"',\n    activity('ACT_MT_Copy').output.executionDetails[0].profile.queue.duration,\n    '\",\"executionTransferDuration\":\"',\n    activity('ACT_MT_Copy').output.executionDetails[0].profile.transfer.duration,\n    '\",\"copyDuration\":\"',\n    activity('ACT_MT_Copy').output.copyDuration,'\"}'\n)",
													"type": "Expression"
												},
												"type": "String"
											},
											"ExecutioinStatus": {
												"value": "Succeeded",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "ACT_GEN_SPRC_LogFailure",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ACT_GEN_SPRC_LogMainFailed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spPopulateLogsErrorDetails]",
										"storedProcedureParameters": {
											"ActivityName": {
												"value": "Copy Activity",
												"type": "String"
											},
											"ErrorCode": {
												"value": {
													"value": "@activity('ACT_MT_Copy').error.ErrorCode",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorMessage": {
												"value": {
													"value": "@activity('ACT_MT_Copy').error.Message",
													"type": "Expression"
												},
												"type": "String"
											},
											"ErrorTimestamp": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"FailureType": {
												"value": {
													"value": "@activity('ACT_MT_Copy').error.failureType",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "WriteLogToADLS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ACT_GEN_SPRC_LogMainSuccess",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat(\n    'select ''Pipeline: ', pipeline().Pipeline, '''',\n    ' union all ',\n    'select ''PipelineRunId: ', pipeline().RunId, '''',\n    ' union all ',\n    'select ''ActivityName: Copy Activity''',\n    ' union all ',\n    'select ''BillingReference: ', activity('ACT_MT_Copy').output.billingReference, ''''\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_ASQL_stg_func_watermarktable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_log",
											"type": "DatasetReference",
											"parameters": {
												"folderPath": "metadata-driven",
												"filename": {
													"value": "@concat(\n    formatDateTime(utcnow(),'yyyyMMddhhmmss'),\n    '_',\n    pipeline().RunId,\n    '.txt')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ACT_GEN_SPRC_LogMainFailed",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "ACT_MT_Copy",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[spPopulateLogs]",
										"storedProcedureParameters": {
											"PipelineName": {
												"value": {
													"value": "@pipeline().Pipeline",
													"type": "Expression"
												},
												"type": "String"
											},
											"PipelineRunId": {
												"value": {
													"value": "@pipeline().RunId",
													"type": "Expression"
												},
												"type": "String"
											},
											"ActivityName": {
												"value": "Copy Activity",
												"type": "String"
											},
											"BillingInfo": {
												"value": "'-1'",
												"type": "String"
											},
											"ExecutionStatistics": {
												"value": "'-1'",
												"type": "String"
											},
											"ExecutionDetails": {
												"value": "'-1'",
												"type": "String"
											},
											"ExecutioinStatus": {
												"value": "Failed",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_movies",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"tmp": {
						"type": "String"
					},
					"tmp_arr": {
						"type": "Array"
					},
					"tmp2": {
						"type": "String"
					},
					"tmp3": {
						"type": "String"
					},
					"tmp4": {
						"type": "String"
					},
					"qwe": {
						"type": "String"
					}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [
					"MetadataDrivenSolution"
				],
				"lastPublishTime": "2024-06-08T14:51:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_etl_tControlMetadata')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_metadatadriven')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_MetadataDriven')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_func_watermarktable')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_Ingest_To_Raw_AU')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_Copy_FileIngestToRaw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(\n    '_',\n    formatDateTime(utcnow(),'yyyyMMddhhmmss'),\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_ABLB_azurementoringdatalakeda",
										"type": "LinkedServiceReference"
									},
									"path": "log"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_Azurementoringauda_Movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_raw_LF_azurementoringdatalakeda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"current_timestamp": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					},
					"OutputFIleName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-03T21:52:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CSV_Azurementoringauda_Movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_LF_azurementoringdatalakeda')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_Ingest_To_Raw_v0')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_ITRC_FOR_CopyFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SETVAR_CurrentDatetime",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SETVAR_ListOfFiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('ListOfFiles')",
								"type": "Expression"
							},
							"batchCount": 1,
							"activities": [
								{
									"name": "ACT_MT_Copy_FileIngestToRaw",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ACT_GEN_SETVAR_OutputFIleName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": false,
												"wildcardFileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "MergeFiles"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"logSettings": {
											"enableCopyActivityLog": true,
											"copyActivityLogSettings": {
												"logLevel": "Info",
												"enableReliableLogging": false
											},
											"logLocationSettings": {
												"linkedServiceName": {
													"referenceName": "LS_ABLB_azurementoringdatalakeda",
													"type": "LinkedServiceReference"
												},
												"path": "log"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_CSV_src_azurementoringstorageda_movies",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_CSV_Azurementoringdatalakeda_Raw_old",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@variables('OutputFIleName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ACT_GEN_SETVAR_OutputFIleName",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "OutputFIleName",
										"value": {
											"value": "@concat(replace(item().name,'.csv','_'),\nvariables('current_timestamp'),'.csv')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ACT_GEN_SETVAR_CurrentDatetime",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "current_timestamp",
							"value": {
								"value": "@formatDatetime(utcnow(),'yyyyMMddhhmmss')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ACT_GEN_META_GetFilesList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_CSV_src_azurementoringstorageda_movies",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ACT_GEN_SETVAR_ListOfFiles",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ACT_GEN_META_GetFilesList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ListOfFiles",
							"value": {
								"value": "@activity('ACT_GEN_META_GetFilesList').output.childItems",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"current_timestamp": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					},
					"OutputFIleName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-03T21:52:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CSV_src_azurementoringstorageda_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_Azurementoringdatalakeda_Raw_old')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_Stg_to_Dbo_asAdmin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_SPRC_spPopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateCast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"current_ts_bigint": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"lastPublishTime": "2024-04-28T18:34:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_cinematickets_src_to_stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_LKP_GetOldWatermark",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select\n  *\nfrom stg.func_watermarktable\nwhere TableName = 'Tickets'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_stg_func_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ACT_GEN_LKP_GetNewWatermark",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select\nmax(TransactionDt) as NewWatermarkvalue\nfrom dbo.Tickets;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_src_cinematickets_tickets",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "ACT_MT_Copy_SrcToStgCinemaTickets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_LKP_GetOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\n*\nfrom [dbo].[Tickets]\nwhere TransactionDt > '@{activity('ACT_GEN_LKP_GetOldWatermark').output.firstRow.WatermarkValue}'\n  and TransactionDt <= '@{activity('ACT_GEN_LKP_GetNewWatermark').output.firstRow.NewWatermarkvalue}';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[cinema_tickets];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CinemaCode",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_code",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "CinemaName",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "cinema_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "MovieId",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "movie_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketCount",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "ticket_count",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "TicketPrice",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										},
										"sink": {
											"name": "ticket_price",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 1,
											"precision": 4
										}
									},
									{
										"source": {
											"name": "TransactionId",
											"type": "String",
											"physicalType": "nvarchar"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "TransactionDt",
											"type": "DateTime",
											"physicalType": "datetime"
										},
										"sink": {
											"name": "transaction_date",
											"type": "DateTime",
											"physicalType": "datetime"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_src_cinematickets_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_stg_cinema_tickets",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_SPRC_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_MT_Copy_SrcToStgCinemaTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('ACT_GEN_LKP_GetNewWatermark').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('ACT_GEN_LKP_GetOldWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"tmp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-16T23:23:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_func_watermarktable')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_src_cinematickets_tickets')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_cinema_tickets')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_cinematickets_stg_to_dbo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_SPRC_spPopulateCinema",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinema]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateCinemaTickets",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateCinema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCinemaTickets]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-04T02:29:59Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_movies_dbo_to_DataMart_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_DF_populate_Dim",
						"description": "populate DimOnlineService and DimMovie",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_movies_dbo_to_DM_dim",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tMovies": {},
									"tMovieStatus": {},
									"DimMovie": {},
									"tOnlineService": {},
									"DimOnlineService": {},
									"loadDimMovie": {},
									"loadDimOnlineService": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"tmp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-19T20:27:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_movies_dbo_to_DM_dim')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_movies_dbo_to_DataMart_fact')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_DF_populate_Fact",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_movies_dbo_to_DM_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"tOnlinePurchase": {},
									"tOnlineService": {},
									"DimOnlineService": {},
									"tMovies": {},
									"DimMovie": {},
									"FactOnlinePurchase": {},
									"loadFactOnlinePurchase": {},
									"loadFactOnlinePurchaseSN": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "Azure-IR-M8",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-20T22:29:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_movies_dbo_to_DM_fact')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/Azure-IR-M8')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_movies_raw_to_stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_Copy_RawToStgRatings",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "ratings_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[ratings];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "userId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "movieId",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "rating",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "rating",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId"
										},
										"sink": {
											"name": "pipelineId"
										}
									},
									{
										"source": {
											"name": "source_filename"
										},
										"sink": {
											"name": "source_filename"
										}
									},
									{
										"source": {
											"name": "timestamp"
										},
										"sink": {
											"name": "timestamp"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_stg_movies_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_MT_Copy_RawToStgCredits",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "credits_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[credits];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "cast",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "cast",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "crew",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "crew",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_stg_movies_credits",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_MT_Copy_RawToStgMoviesMeatadata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "movies_metadata_*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE [stg].[movies_metadata];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "adult",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "adult",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "belongs_to_collection",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "budget",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "budget",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "genres",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "genres",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "homepage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "homepage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "imdb_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_language",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_language",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "original_title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "original_title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "overview",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "overview",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "popularity",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "popularity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "poster_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_companies",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "production_countries",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "release_date",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "release_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "revenue",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "revenue",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "runtime",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "runtime",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "spoken_languages",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "status",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "tagline",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "tagline",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "title",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "title",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "video",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "video",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_average",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "vote_count",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pipelineId",
											"type": "String"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "source_filename",
											"type": "String"
										},
										"sink": {
											"name": "source_filename",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_raw_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_stg_movies_movies_metadata",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_MT_MoveRawToArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_MT_Copy_RawToStgCredits",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_MT_Copy_RawToStgMoviesMeatadata",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_MT_Copy_RawToStgRatings",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "movies",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ""
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_raw_LF_azurementoringdatalakeda",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_raw_movies_archivetarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_DEL_CleanseRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ACT_MT_MoveRawToArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_CSV_raw_LF_azurementoringdatalakeda",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": "*.csv",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"current_ts_bigint": {
						"type": "Integer"
					},
					"tmp_arr": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-27T18:02:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_movies_ratings')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_movies_credits')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_movies_movies_metadata')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_LF_azurementoringdatalakeda')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_movies_archivetarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_movies_src_to_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_Copy_FileIngestToRaw",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": {
										"value": "@concat(\n    '_',\n    formatDateTime(utcnow(),'yyyyMMddhhmmss'),\n    '.csv'\n)",
										"type": "Expression"
									}
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_CSV_src_azurementoringstorageda_movies",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_raw_LF_azurementoringdatalakeda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filename": {
						"type": "String"
					},
					"current_timestamp": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					},
					"OutputFIleName": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-11T18:15:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_CSV_src_azurementoringstorageda_movies')]",
				"[concat(variables('factoryId'), '/datasets/DS_CSV_raw_LF_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_movies_stg_to_dbo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_SPRC_spPopulateCast",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCast]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateCompany",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateCompany]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateGenre",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateGenre]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMovieStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovieStatus]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMovies",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovieStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMovies]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateRatings",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulatetRatings]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesCastMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateCast",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCastMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesCompanyMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateCompany",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesCompanyMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateMoviesGenreMap",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateMovies",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_SPRC_spPopulateGenre",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateMoviesGenreMap]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"current_ts_bigint": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-11T18:15:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_online_raw_to_stg')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_MT_Copy_SrcToStgOnlinePurchase",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "source_filename",
										"value": "$$FILENAME"
									},
									{
										"name": "pipelineId",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table [stg].[online_purchase];",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "$['serviceName']"
										},
										"sink": {
											"name": "online_service_name",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['serviceCode']"
										},
										"sink": {
											"name": "online_service_code",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['movieId']"
										},
										"sink": {
											"name": "movie_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['userId']"
										},
										"sink": {
											"name": "user_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['price']"
										},
										"sink": {
											"name": "price",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['id']"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['transaction']['datetime']"
										},
										"sink": {
											"name": "transaction_date",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['source_filename']"
										},
										"sink": {
											"name": "source_filename",
											"type": "String"
										}
									},
									{
										"source": {
											"path": "$['pipelineId']"
										},
										"sink": {
											"name": "pipelineId",
											"type": "String"
										}
									}
								],
								"collectionReference": ""
							}
						},
						"inputs": [
							{
								"referenceName": "DS_JSON_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_stg_online_purchase",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_MT_MoveRawToArchive",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_MT_Copy_SrcToStgOnlinePurchase",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "DS_JSON_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON_raw_online_archivetarget",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_GEN_DEL_CleanseRaw",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ACT_MT_MoveRawToArchive",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_JSON_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": false,
								"wildcardFileName": "*.json",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-12T19:26:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_JSON_raw_online')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_online_purchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_JSON_raw_online_archivetarget')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_online_src_to_raw')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_LKP_GetOldWatermark",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select\n  *\nfrom stg.func_watermarktable\nwhere TableName = 'online_purchase'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_stg_func_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ACT_GEN_LKP_GetNewWatermark",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select GETUTCDATE() as NewWatermarkvalue;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_stg_func_watermarktable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "ACT_GEN_SPRC_UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_MT_Copy_SrcToStgOnlinePurchase_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@{activity('ACT_GEN_LKP_GetNewWatermark').output.firstRow.NewWatermarkvalue}",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@{activity('ACT_GEN_LKP_GetOldWatermark').output.firstRow.TableName}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_MT_Copy_SrcToStgOnlinePurchase_copy1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ACT_GEN_LKP_GetOldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ACT_GEN_LKP_GetNewWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"modifiedDatetimeStart": {
										"value": "@formatDateTime(\n    activity('ACT_GEN_LKP_GetOldWatermark').output.firstRow.WatermarkValue, 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@formatDateTime(\n    activity('ACT_GEN_LKP_GetNewWatermark').output.firstRow.NewWatermarkvalue, 'yyyy-MM-ddTHH:mm:ssZ')",
										"type": "Expression"
									},
									"wildcardFileName": "*.json",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false,
							"parallelCopies": 32,
							"dataIntegrationUnits": 2
						},
						"inputs": [
							{
								"referenceName": "DS_JSON_src_azurementoringstorageda_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_JSON_raw_online",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-16T23:23:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_stg_func_watermarktable')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]",
				"[concat(variables('factoryId'), '/datasets/DS_JSON_src_azurementoringstorageda_online')]",
				"[concat(variables('factoryId'), '/datasets/DS_JSON_raw_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DATA_online_stg_to_dbo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_SPRC_spPopulateOnlineService",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlineService]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ACT_GEN_SPRC_spPopulateOnlinePurchasee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ACT_GEN_SPRC_spPopulateOnlineService",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[spPopulateOnlinePurchase]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASQL_movies_adf",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-11T18:13:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_master_main')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "movies",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_master_pipeline_movies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "tickets",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "online",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_master_pipeline_cinematickets",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "online",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "movies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_master_pipeline_online",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DM_Dim",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "tickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_dbo_to_DataMart_dim",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DM_FCT_online",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DM_Dim",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_dbo_to_DataMart_fact",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-20T22:31:38Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_master_pipeline_movies')]",
				"[concat(variables('factoryId'), '/pipelines/PL_master_pipeline_cinematickets')]",
				"[concat(variables('factoryId'), '/pipelines/PL_master_pipeline_online')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_dbo_to_DataMart_dim')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_dbo_to_DataMart_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_master_pipeline_cinematickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_EPIPE_CinemaSourceToStg",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_cinematickets_src_to_stg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACT_GEN_EPIPE_CinemaStgToDbo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACT_GEN_EPIPE_CinemaSourceToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_cinematickets_stg_to_dbo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-10T23:55:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_cinematickets_src_to_stg')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_cinematickets_stg_to_dbo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_master_pipeline_movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_EPIPE_IngestToRaw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_src_to_raw",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACT_GEN_EPIPE_RawToStg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACT_GEN_EPIPE_IngestToRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_raw_to_stg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACT_GEN_EPIPE_Stg_to_Dbo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACT_GEN_EPIPE_RawToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_stg_to_dbo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-11T18:15:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_src_to_raw')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_raw_to_stg')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_stg_to_dbo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_master_pipeline_online')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_EPIPE_OnlineSrcToRaw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_online_src_to_raw",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACT_GEN_EPIPE_OnlineRawToStg",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACT_GEN_EPIPE_OnlineSrcToRaw",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_online_raw_to_stg",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ACT_GEN_EPIPE_OnlineStgToDbo",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ACT_GEN_EPIPE_OnlineRawToStg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_online_stg_to_dbo",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-05-12T19:26:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_online_src_to_raw')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_online_raw_to_stg')]",
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_online_stg_to_dbo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMP_CDC_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetChangeCount",
						"description": "",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10); \nSET @begin_time = ''',pipeline().parameters.triggerStartTime,''';\nSET @end_time = ''',pipeline().parameters.triggerEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than'', @end_time);\nSELECT count(1) changecount FROM cdc.fn_cdc_get_net_changes_tmp_customers(@from_lsn, @to_lsn, ''all'')')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "tmp_cdc_customers_source",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "HasChangedRows",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetChangeCount",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(int(activity('GetChangeCount').output.firstRow.changecount),0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy incremental data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @begin_time datetime, @end_time datetime, @from_lsn binary(10), @to_lsn binary(10); \nSET @begin_time = ''',pipeline().parameters.triggerStartTime,''';\nSET @end_time = ''',pipeline().parameters.triggerEndTime,''';\nSET @from_lsn = sys.fn_cdc_map_time_to_lsn(''smallest greater than or equal'', @begin_time);\nSET @to_lsn = sys.fn_cdc_map_time_to_lsn(''largest less than'', @end_time);\nSELECT * FROM cdc.fn_cdc_get_net_changes_tmp_customers(@from_lsn, @to_lsn, ''all'')')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "tmp_cdc_customers_source",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tmp_cdc_customers_sink",
											"type": "DatasetReference",
											"parameters": {
												"triggerStart": "@pipeline().parameters.triggerStartTime"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"triggerStartTime": {
						"type": "string",
						"defaultValue": "2020-03-28 12:25:00.123"
					},
					"triggerEndTime": {
						"type": "string",
						"defaultValue": "2026-03-29 08:00:00.230"
					}
				},
				"variables": {
					"tmp": {
						"type": "String"
					},
					"tmp3": {
						"type": "String"
					},
					"tmp2": {
						"type": "String"
					}
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"lastPublishTime": "2024-05-05T16:08:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/tmp_cdc_customers_source')]",
				"[concat(variables('factoryId'), '/datasets/tmp_cdc_customers_sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TMP_SendEmail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": "https://prod2-04.francecentral.logic.azure.com:443/workflows/8633827876f7437ca01bd7b6b8975d98/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=gMHxcIhKvyk3JLBPzCImiwaAuu-6qCzVpBjx6Dz9Vnc",
							"body": {
								"message": "This is a custom dynamic message from your pipeline with run ID @{pipeline().RunId}.",
								"dataFactoryName": "@{pipeline().DataFactory}",
								"pipelineName": "@{pipeline().Pipeline}",
								"pipelineStatus": "@{pipeline().Pipeline}",
								"receiver": "@{pipeline().parameters.receiver}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"receiver": {
						"type": "string",
						"defaultValue": "dzmitry_akulich1@epam.com"
					}
				},
				"variables": {
					"tmp": {
						"type": "String"
					}
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-08T14:51:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/new_tmp_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_GEN_EPIPE_IngestToRaw",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PL_DATA_movies_src_to_raw",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_DATA_movies_src_to_raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_Fail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": {
								"value": "@pipeline().Pipeline",
								"type": "Expression"
							},
							"errorCode": {
								"value": "@pipeline()?.TriggerEvent?.FileName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-02T13:15:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table movies.stg.ratings_from_excel",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": true
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "userId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "movieId",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "rating",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "timestamp",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Excel1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "excel_ratings",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"lastPublishTime": "2024-06-02T22:05:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Excel1')]",
				"[concat(variables('factoryId'), '/datasets/excel_ratings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DM_DimMovie')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatus",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimMovie"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DM_DimOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "DimOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DM_FactOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MonthKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "OnlineServiceKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PurchaseAmount",
						"type": "decimal",
						"precision": 10,
						"scale": 1
					},
					{
						"name": "PurchaseQuantity",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "FactOnlinePurchase_MonthlySnapshot"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dbo_MetadataDriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"table": {
						"type": "String"
					},
					"schema": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dbo_tMovieStatus')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovieStatus"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dbo_tMovies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieIdNK",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Budget",
						"type": "int",
						"precision": 10
					},
					{
						"name": "HomepagePath",
						"type": "nvarchar"
					},
					{
						"name": "Title",
						"type": "nvarchar"
					},
					{
						"name": "OriginalTitle",
						"type": "nvarchar"
					},
					{
						"name": "ReleaseDate",
						"type": "date"
					},
					{
						"name": "Revenue",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Runtime",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieStatusId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "AvgVote",
						"type": "decimal",
						"precision": 3,
						"scale": 1
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tMovies"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dbo_tOnlinePurchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "UserId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "SrcFileName",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlinePurchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dbo_tOnlineService')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ServiceId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ServiceCode",
						"type": "nvarchar"
					},
					{
						"name": "ServiceName",
						"type": "nvarchar"
					},
					{
						"name": "CreatedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tOnlineService"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dim_test1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "name",
						"type": "text"
					},
					{
						"name": "country",
						"type": "text"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_dim_test2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_DataMart_adf",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "fullname",
						"type": "text"
					},
					{
						"name": "country",
						"type": "text"
					},
					{
						"name": "insert_ts",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "update_ts",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "dw_hash",
						"type": "text"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "test2"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_DataMart_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_etl_tControlMetadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SourceObjectSettings",
						"type": "nvarchar"
					},
					{
						"name": "SourceConnectionSettingsName",
						"type": "varchar"
					},
					{
						"name": "CopySourceSettings",
						"type": "nvarchar"
					},
					{
						"name": "SinkObjectSettings",
						"type": "nvarchar"
					},
					{
						"name": "SinkConnectionSettingsName",
						"type": "varchar"
					},
					{
						"name": "CopySinkSettings",
						"type": "nvarchar"
					},
					{
						"name": "CopyActivitySettings",
						"type": "nvarchar"
					},
					{
						"name": "DataLoadingBehaviorSettings",
						"type": "nvarchar"
					},
					{
						"name": "TaskId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CopyEnabled",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tControlMetadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_etl_tLogs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PipelineName",
						"type": "nvarchar"
					},
					{
						"name": "PipelineRunId",
						"type": "nvarchar"
					},
					{
						"name": "ActivityName",
						"type": "nvarchar"
					},
					{
						"name": "BillingInfo",
						"type": "nvarchar"
					},
					{
						"name": "ExecutionStatistics",
						"type": "nvarchar"
					},
					{
						"name": "ExecutionDetails",
						"type": "nvarchar"
					},
					{
						"name": "ExecutioinStatus",
						"type": "nvarchar"
					},
					{
						"name": "LogTimestamp",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "etl",
					"table": "tLogs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_src_cinematickets_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_cinematickets_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CinemaCode",
						"type": "nvarchar"
					},
					{
						"name": "CinemaName",
						"type": "nvarchar"
					},
					{
						"name": "MovieId",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketCount",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TicketPrice",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "TransactionId",
						"type": "nvarchar"
					},
					{
						"name": "TransactionDt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_cinematickets_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_cinema_tickets')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cinema_code",
						"type": "nvarchar"
					},
					{
						"name": "cinema_name",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_count",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ticket_price",
						"type": "decimal",
						"precision": 4,
						"scale": 1
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "cinema_tickets"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_func_watermarktable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "func_watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_movies_credits')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cast",
						"type": "nvarchar"
					},
					{
						"name": "crew",
						"type": "nvarchar"
					},
					{
						"name": "id",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "credits"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_movies_movies_metadata')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "movies_metadata"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_movies_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "nvarchar"
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ASQL_stg_online_purchase')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies_adf",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "online_service_name",
						"type": "nvarchar"
					},
					{
						"name": "online_service_code",
						"type": "nvarchar"
					},
					{
						"name": "movie_id",
						"type": "nvarchar"
					},
					{
						"name": "user_id",
						"type": "nvarchar"
					},
					{
						"name": "price",
						"type": "nvarchar"
					},
					{
						"name": "transaction_id",
						"type": "nvarchar"
					},
					{
						"name": "transaction_date",
						"type": "nvarchar"
					},
					{
						"name": "source_filename",
						"type": "nvarchar"
					},
					{
						"name": "pipelineId",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "online_purchase"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_Azurementoringauda_Movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringauda_movies",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "movies"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringauda_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_Azurementoringdatalakeda_Raw_old')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "archive"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_log')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folderPath": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().folderPath",
							"type": "Expression"
						},
						"container": "log"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_raw_LF_azurementoringdatalakeda')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_raw_metadatadriven')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"columnDelimiter": {
						"type": "string"
					},
					"escapeChar": {
						"type": "string"
					},
					"quoteChar": {
						"type": "string"
					},
					"firstRowAsHeader": {
						"type": "bool"
					},
					"container": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().columnDelimiter",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().escapeChar",
						"type": "Expression"
					},
					"firstRowAsHeader": true,
					"quoteChar": {
						"value": "@dataset().quoteChar",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_raw_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_raw_movies_archivetarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "movies/archive",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"rowDelimiter": "\n",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "cast",
						"type": "String"
					},
					{
						"name": "crew",
						"type": "String"
					},
					{
						"name": "id",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_src_azurementoringstorageda_movies')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringstorageda_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "*",
						"container": "movies"
					},
					"columnDelimiter": "\u0001",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringstorageda_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_CSV_src_azurementoringstorageda_tmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringstorageda_tmp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "moviesDB.csv",
						"container": "tmp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "RottenTomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringstorageda_tmp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_JSON_raw_online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "online",
						"container": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_JSON_raw_online_archivetarget')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "online/archive",
						"container": "raw"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_JSON_src_azurementoringstorageda_online')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringstorageda_online",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "online"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringstorageda_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "sample_rate",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "sample_rate.xlsx",
						"folderPath": "movies",
						"container": "raw"
					},
					"range": "A2:D100",
					"firstRowAsHeader": false
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/excel_ratings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_movies",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "userId",
						"type": "nvarchar"
					},
					{
						"name": "movieId",
						"type": "nvarchar"
					},
					{
						"name": "rating",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "timestamp",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "ratings_from_excel"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_movies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/output_aggregated')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringstorageda_tmp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "agg.csv",
						"container": "tmp"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringstorageda_tmp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_cdc_customers_sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ABLB_azurementoringdatalakeda",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"triggerStart": {
						"type": "string"
					}
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@concat(formatDateTime(dataset().triggerStart,'yyyyMMddHHmmssfff'),'.csv')",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('cdc_customers/incremental/',formatDateTime(dataset().triggerStart,'yyyy/MM/dd'))",
							"type": "Expression"
						},
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ABLB_azurementoringdatalakeda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_cdc_customers_source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASQL_cinematickets_adf",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "tmp"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "__$start_lsn",
						"type": "binary"
					},
					{
						"name": "__$end_lsn",
						"type": "binary"
					},
					{
						"name": "__$seqval",
						"type": "binary"
					},
					{
						"name": "__$operation",
						"type": "int",
						"precision": 10
					},
					{
						"name": "__$update_mask",
						"type": "varbinary"
					},
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "varchar"
					},
					{
						"name": "last_name",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "city",
						"type": "varchar"
					},
					{
						"name": "__$command_id",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "cdc",
					"table": "tmp_customers_CT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASQL_cinematickets_adf')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_azurementoringauda_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_ABLB_azurementoringauda_movies_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_azurementoringdatalakeda')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('LS_ABLB_azurementoringdatalakeda_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_azurementoringstorageda_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ABLB_azurementoringstorageda_movies_properties_typeProperties_sasUri_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_azurementoringstorageda_online')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('LS_ABLB_azurementoringstorageda_online_sasUri')]",
					"sasToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_ABLB_azurementoringstorageda_online_properties_typeProperties_sasToken_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ABLB_azurementoringstorageda_tmp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"sasUri": "[parameters('LS_ABLB_azurementoringstorageda_tmp_sasUri')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_AKV')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('LS_AKV_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_DataMart_adf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_DataMart_adf_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_cinematickets_adf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "on-premise\n",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_cinematickets_adf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "secret-azuresqlserveronpremise-adf"
					}
				},
				"connectVia": {
					"referenceName": "SelfHostedIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_movies')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_movies_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "secret-azuresqlserver"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASQL_movies_adf')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ADF user with limited privileges",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASQL_movies_adf_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "LS_AKV",
							"type": "LinkedServiceReference"
						},
						"secretName": "secret-azuresqlserver-adf"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_AKV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CinemaTicketsTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_master_pipeline_cinematickets",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-05-04T22:30:00",
						"timeZone": "Georgian Standard Time",
						"schedule": {
							"minutes": [
								36
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_master_pipeline_cinematickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnlinePurchaseHourly')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PL_master_pipeline_online",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2024-05-12T22:32:00",
						"endTime": "2024-05-14T22:32:00",
						"timeZone": "Georgian Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PL_master_pipeline_online')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cdc_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "TMP_CDC_pipeline",
						"type": "PipelineReference"
					},
					"parameters": {
						"triggerStartTime": "[parameters('cdc_trigger_properties_pipeline_parameters_triggerStartTime')]",
						"triggerEndTime": "[parameters('cdc_trigger_properties_pipeline_parameters_triggerEndTime')]"
					}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 15,
					"startTime": "2024-05-05T17:08:00Z",
					"endTime": "2024-05-06T17:08:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/TMP_CDC_pipeline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_cdc_testing')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-05-05T16:08:00Z",
					"endTime": "2024-05-06T16:08:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Azure-IR-M8')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"description": "For Data Flow ",
				"typeProperties": {
					"computeProperties": {
						"location": "France Central",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 5,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_DM_dim')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "loadDimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "loadDimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "dboPreparationJoin"
						},
						{
							"name": "addHashSource",
							"description": "create Hash Column"
						},
						{
							"name": "addHashTarget",
							"description": "create Hash Column"
						},
						{
							"name": "notExistsMovie",
							"description": "Filtering rows which are not matching in undefined based on columns 'addHashSource@d_hash, addHashTarget@d_hash'"
						},
						{
							"name": "lookupMovie"
						},
						{
							"name": "addUpdateInsertMovie",
							"description": "Add new Insert and Update columns"
						},
						{
							"name": "upsertMovie"
						},
						{
							"name": "notExistsService"
						},
						{
							"name": "lookupService"
						},
						{
							"name": "addUpdateInsertService"
						},
						{
							"name": "upsertService"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovieStatus",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> dboPreparationJoin",
						"dboPreparationJoin derive(d_hash = sha1(Title+toString(ReleaseDate)+toString(Runtime)+MovieStatusName)) ~> addHashSource",
						"DimMovie derive(d_hash = sha1(Title+toString(ReleaseDate)+toString(Runtime)+MovieStatus)) ~> addHashTarget",
						"addHashSource, addHashTarget exists(addHashSource@d_hash == addHashTarget@d_hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> notExistsMovie",
						"notExistsMovie, addHashTarget lookup(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupMovie",
						"lookupMovie derive(d_insert_ts = iif(isNull(DimMovie@CreatedDate), currentTimestamp(), DimMovie@CreatedDate),",
						"          d_update_ts = currentTimestamp()) ~> addUpdateInsertMovie",
						"addUpdateInsertMovie alterRow(upsertIf(true())) ~> upsertMovie",
						"tOnlineService, DimOnlineService exists(tOnlineService@ServiceCode  == DimOnlineService@ServiceCode && tOnlineService@ServiceName == DimOnlineService@ServiceName,",
						"     negate:true,",
						"     broadcast: 'auto')~> notExistsService",
						"notExistsService, DimOnlineService lookup(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookupService",
						"lookupService derive(insert_ts = iif(isNull(DimOnlineService@CreatedDate), currentTimestamp(), DimOnlineService@CreatedDate),",
						"          update_ts = currentTimestamp()) ~> addUpdateInsertService",
						"addUpdateInsertService alterRow(upsertIf(true())) ~> upsertService",
						"upsertMovie sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['MovieIdNK'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = tMovies@MovieIdNK,",
						"          Title = tMovies@Title,",
						"          ReleaseDate = tMovies@ReleaseDate,",
						"          Runtime = tMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = d_insert_ts,",
						"          ModifiedDate = d_update_ts",
						"     )) ~> loadDimMovie",
						"upsertService sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ServiceCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = tOnlineService@ServiceCode,",
						"          ServiceName = tOnlineService@ServiceName,",
						"          CreatedDate = insert_ts,",
						"          ModifiedDate = update_ts",
						"     )) ~> loadDimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_DM_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "loadFactOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "loadFactOnlinePurchaseSN"
						}
					],
					"transformations": [
						{
							"name": "addCols"
						},
						{
							"name": "joinDboService"
						},
						{
							"name": "joinDboMovies"
						},
						{
							"name": "getDimServiceKey"
						},
						{
							"name": "getDimMovieKey"
						},
						{
							"name": "getNewPurchases"
						},
						{
							"name": "calcHashCurrent"
						},
						{
							"name": "aggregate"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactOnlinePurchase",
						"getDimMovieKey derive(dDateKey = replace(left(toString(TransactionDate), 10), '-', ''),",
						"          dHash = sha1(toString(replace(left(toString(TransactionDate), 10), '-', ''))+toString(ServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId)),",
						"          dMonthKey = replace(left(toString(TransactionDate), 7), '-', '')) ~> addCols",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDboService",
						"joinDboService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDboMovies",
						"joinDboMovies, DimOnlineService lookup(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'right')~> getDimServiceKey",
						"getDimServiceKey, DimMovie lookup(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> getDimMovieKey",
						"addCols, calcHashCurrent exists(addCols@dHash == calcHashCurrent@dHash,",
						"     negate:true,",
						"     broadcast: 'auto')~> getNewPurchases",
						"FactOnlinePurchase derive(dHash = sha1(toString(DateKey)+toString(OnlineServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId))) ~> calcHashCurrent",
						"addCols aggregate(groupBy(dMonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate",
						"getNewPurchases sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = dDateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> loadFactOnlinePurchase",
						"aggregate sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table DataMart.dbo.FactOnlinePurchase_MonthlySnapshot;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = dMonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> loadFactOnlinePurchaseSN"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_FactOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_DM_fact_p1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "archive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "FactOnlinePurchase"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "loadFactOnlinePurchase"
						}
					],
					"transformations": [
						{
							"name": "addCols"
						},
						{
							"name": "joinDboService"
						},
						{
							"name": "joinDboMovies"
						},
						{
							"name": "getDimServiceKey"
						},
						{
							"name": "getDimMovieKey"
						},
						{
							"name": "getNewPurchases"
						},
						{
							"name": "calcHashCurrent"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"source(output(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> FactOnlinePurchase",
						"getDimMovieKey derive(dDateKey = replace(left(toString(TransactionDate), 10), '-', ''),",
						"          dHash = sha1(toString(replace(left(toString(TransactionDate), 10), '-', ''))+toString(ServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId))) ~> addCols",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDboService",
						"joinDboService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDboMovies",
						"joinDboMovies, DimOnlineService lookup(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'right')~> getDimServiceKey",
						"getDimServiceKey, DimMovie lookup(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> getDimMovieKey",
						"addCols, calcHashCurrent exists(addCols@dHash == calcHashCurrent@dHash,",
						"     negate:true,",
						"     broadcast: 'auto')~> getNewPurchases",
						"FactOnlinePurchase derive(dHash = sha1(toString(DateKey)+toString(OnlineServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId))) ~> calcHashCurrent",
						"getNewPurchases sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          DateKey as integer,",
						"          OnlineServiceKey as integer,",
						"          MovieKey as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DateKey = dDateKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          MovieKey,",
						"          Price,",
						"          TransactionId",
						"     )) ~> loadFactOnlinePurchase"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimMovie')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_FactOnlinePurchase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_DM_fact_p2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "archive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlinePurchase",
								"type": "DatasetReference"
							},
							"name": "tOnlinePurchase"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot",
								"type": "DatasetReference"
							},
							"name": "loadFactOnlinePurchaseSN"
						}
					],
					"transformations": [
						{
							"name": "addMonthKey"
						},
						{
							"name": "joinDboService"
						},
						{
							"name": "joinDimService"
						},
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Id as integer,",
						"          ServiceId as integer,",
						"          MovieId as integer,",
						"          UserId as integer,",
						"          Price as decimal(4,1),",
						"          TransactionId as string,",
						"          TransactionDate as timestamp,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlinePurchase",
						"source(output(",
						"          ServiceId as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"joinDimService derive(dMonthKey = replace(left(toString(TransactionDate), 7), '-', '')) ~> addMonthKey",
						"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDboService",
						"joinDboService, DimOnlineService join(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinDimService",
						"addMonthKey aggregate(groupBy(dMonthKey,",
						"          ServiceKey),",
						"     PurchaseAmount = sum(Price),",
						"          PurchaseQuantity = count(TransactionId)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MonthKey as integer,",
						"          OnlineServiceKey as integer,",
						"          PurchaseAmount as decimal(10,1),",
						"          PurchaseQuantity as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     preSQLs:['truncate table DataMart.dbo.FactOnlinePurchase_MonthlySnapshot;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MonthKey = dMonthKey,",
						"          OnlineServiceKey = ServiceKey,",
						"          PurchaseAmount,",
						"          PurchaseQuantity",
						"     )) ~> loadFactOnlinePurchaseSN"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlinePurchase')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_dim_part1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "archive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovies",
								"type": "DatasetReference"
							},
							"name": "tMovies"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tMovieStatus",
								"type": "DatasetReference"
							},
							"name": "tMovieStatus"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "DimMovie"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimMovie",
								"type": "DatasetReference"
							},
							"name": "loadDimMovie"
						}
					],
					"transformations": [
						{
							"name": "dboPreparationJoin"
						},
						{
							"name": "addHashSource",
							"description": "create Hash Column"
						},
						{
							"name": "addHashTarget",
							"description": "create Hash Column"
						},
						{
							"name": "notExistsByHash",
							"description": "Filtering rows which are not matching in undefined based on columns 'addHashSource@d_hash, addHashTarget@d_hash'"
						},
						{
							"name": "Lookup"
						},
						{
							"name": "addInsertUpdate",
							"description": "Add new Insert and Update columns"
						},
						{
							"name": "alterRow"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MovieId as integer,",
						"          MovieIdNK as integer,",
						"          Budget as integer,",
						"          HomepagePath as string,",
						"          Title as string,",
						"          OriginalTitle as string,",
						"          ReleaseDate as date,",
						"          Revenue as long,",
						"          Runtime as integer,",
						"          MovieStatusId as integer,",
						"          AvgVote as decimal(3,1),",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp,",
						"          SrcFileName as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovies",
						"source(output(",
						"          MovieStatusId as integer,",
						"          MovieStatusName as string,",
						"          CreatedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tMovieStatus",
						"source(output(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimMovie",
						"tMovies, tMovieStatus join(tMovies@MovieStatusId == tMovieStatus@MovieStatusId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> dboPreparationJoin",
						"dboPreparationJoin derive(d_hash = sha1(Title+toString(ReleaseDate)+toString(Runtime)+MovieStatusName)) ~> addHashSource",
						"DimMovie derive(d_hash = sha1(Title+toString(ReleaseDate)+toString(Runtime)+MovieStatus)) ~> addHashTarget",
						"addHashSource, addHashTarget exists(addHashSource@d_hash == addHashTarget@d_hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> notExistsByHash",
						"notExistsByHash, addHashTarget lookup(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
						"     multiple: true,",
						"     broadcast: 'auto')~> Lookup",
						"Lookup derive(d_insert_ts = iif(isNull(DimMovie@CreatedDate), currentTimestamp(), DimMovie@CreatedDate),",
						"          d_update_ts = currentTimestamp()) ~> addInsertUpdate",
						"addInsertUpdate alterRow(upsertIf(true())) ~> alterRow",
						"alterRow sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          MovieKey as integer,",
						"          MovieIdNK as integer,",
						"          Title as string,",
						"          ReleaseDate as date,",
						"          Runtime as integer,",
						"          MovieStatus as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['MovieIdNK'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          MovieIdNK = tMovies@MovieIdNK,",
						"          Title = tMovies@Title,",
						"          ReleaseDate = tMovies@ReleaseDate,",
						"          Runtime = tMovies@Runtime,",
						"          MovieStatus = MovieStatusName,",
						"          CreatedDate = d_insert_ts,",
						"          ModifiedDate = d_update_ts",
						"     )) ~> loadDimMovie"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovies')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tMovieStatus')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimMovie')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_movies_dbo_to_dim_part2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "archive"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dbo_tOnlineService",
								"type": "DatasetReference"
							},
							"name": "tOnlineService"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "DimOnlineService"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_DM_DimOnlineService",
								"type": "DatasetReference"
							},
							"name": "loadDimOnlineService"
						}
					],
					"transformations": [
						{
							"name": "notExistsService"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> tOnlineService",
						"source(output(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimOnlineService",
						"tOnlineService, DimOnlineService exists(tOnlineService@ServiceName  == DimOnlineService@ServiceName,",
						"     negate:true,",
						"     broadcast: 'auto')~> notExistsService",
						"notExistsService, DimOnlineService lookup(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(insert_ts = iif(isNull(DimOnlineService@CreatedDate), currentTimestamp(), DimOnlineService@CreatedDate),",
						"          update_ts = currentTimestamp()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          ServiceKey as integer,",
						"          ServiceCode as string,",
						"          ServiceName as string,",
						"          CreatedDate as timestamp,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['ServiceCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ServiceCode = tOnlineService@ServiceCode,",
						"          ServiceName = tOnlineService@ServiceName,",
						"          CreatedDate = insert_ts,",
						"          ModifiedDate = update_ts",
						"     )) ~> loadDimOnlineService"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dbo_tOnlineService')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_DM_DimOnlineService')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_DF_test')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "tmp"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dim_test1",
								"type": "DatasetReference"
							},
							"name": "testSource"
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_dim_test2",
								"type": "DatasetReference"
							},
							"name": "testTarget"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_dim_test2",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "createHash"
						},
						{
							"name": "exists"
						},
						{
							"name": "setAttributes"
						},
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as integer,",
						"          name as string,",
						"          country as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> testSource",
						"source(output(",
						"          id as integer,",
						"          fullname as string,",
						"          country as string,",
						"          insert_ts as timestamp,",
						"          update_ts as timestamp,",
						"          dw_hash as string",
						"     ),",
						"     allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> testTarget",
						"setAttributes alterRow(upsertIf(true())) ~> alterRow1",
						"testSource derive(DWhash = sha1(name+country)) ~> createHash",
						"createHash, testTarget exists(DWhash == dw_hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists",
						"lookup1 derive(new_insert_ts = iif(\r",
						"    isNull(insert_ts),\r",
						"    currentTimestamp(),\r",
						"    insert_ts\r",
						"),",
						"          new_update_ts = currentTimestamp()) ~> setAttributes",
						"exists, testTarget lookup(testSource@id == testTarget@id,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"alterRow1 sink(allowSchemaDrift: false,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          fullname as string,",
						"          country as string,",
						"          insert_ts as timestamp,",
						"          update_ts as timestamp,",
						"          dw_hash as string",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['id'],",
						"     format: 'table',",
						"     preSQLs:['set identity_insert [dbo].[DimMovie] off;'],",
						"     postSQLs:['set identity_insert [dbo].[DimMovie] on;'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = testSource@id,",
						"          fullname = name,",
						"          country = testSource@country,",
						"          insert_ts = new_insert_ts,",
						"          update_ts = new_update_ts,",
						"          dw_hash = DWhash",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dim_test1')]",
				"[concat(variables('factoryId'), '/datasets/DS_ASQL_dim_test2')]"
			]
		}
	]
}