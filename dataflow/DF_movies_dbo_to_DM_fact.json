{
	"name": "DF_movies_dbo_to_DM_fact",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ASQL_dbo_tOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "tOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_dbo_tOnlineService",
						"type": "DatasetReference"
					},
					"name": "tOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DM_DimOnlineService",
						"type": "DatasetReference"
					},
					"name": "DimOnlineService"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_dbo_tMovies",
						"type": "DatasetReference"
					},
					"name": "tMovies"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DM_DimMovie",
						"type": "DatasetReference"
					},
					"name": "DimMovie"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "FactOnlinePurchase"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_ASQL_DM_FactOnlinePurchase",
						"type": "DatasetReference"
					},
					"name": "loadFactOnlinePurchase"
				},
				{
					"dataset": {
						"referenceName": "DS_ASQL_DM_FactOnlinePurchase_MonthlySnapshot",
						"type": "DatasetReference"
					},
					"name": "loadFactOnlinePurchaseSN"
				}
			],
			"transformations": [
				{
					"name": "addCols"
				},
				{
					"name": "joinDboService"
				},
				{
					"name": "joinDboMovies"
				},
				{
					"name": "getDimServiceKey"
				},
				{
					"name": "getDimMovieKey"
				},
				{
					"name": "getNewPurchases"
				},
				{
					"name": "calcHashCurrent"
				},
				{
					"name": "aggregate"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Id as integer,",
				"          ServiceId as integer,",
				"          MovieId as integer,",
				"          UserId as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string,",
				"          TransactionDate as timestamp,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlinePurchase",
				"source(output(",
				"          ServiceId as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tOnlineService",
				"source(output(",
				"          ServiceKey as integer,",
				"          ServiceCode as string,",
				"          ServiceName as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimOnlineService",
				"source(output(",
				"          MovieId as integer,",
				"          MovieIdNK as integer,",
				"          Budget as integer,",
				"          HomepagePath as string,",
				"          Title as string,",
				"          OriginalTitle as string,",
				"          ReleaseDate as date,",
				"          Revenue as long,",
				"          Runtime as integer,",
				"          MovieStatusId as integer,",
				"          AvgVote as decimal(3,1),",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp,",
				"          SrcFileName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> tMovies",
				"source(output(",
				"          MovieKey as integer,",
				"          MovieIdNK as integer,",
				"          Title as string,",
				"          ReleaseDate as date,",
				"          Runtime as integer,",
				"          MovieStatus as string,",
				"          CreatedDate as timestamp,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimMovie",
				"source(output(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> FactOnlinePurchase",
				"getDimMovieKey derive(dDateKey = replace(left(toString(TransactionDate), 10), '-', ''),",
				"          dHash = sha1(toString(replace(left(toString(TransactionDate), 10), '-', ''))+toString(ServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId)),",
				"          dMonthKey = replace(left(toString(TransactionDate), 7), '-', '')) ~> addCols",
				"tOnlinePurchase, tOnlineService join(tOnlinePurchase@ServiceId == tOnlineService@ServiceId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDboService",
				"joinDboService, tMovies join(tOnlinePurchase@MovieId == tMovies@MovieId,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDboMovies",
				"joinDboMovies, DimOnlineService lookup(tOnlineService@ServiceCode == DimOnlineService@ServiceCode,",
				"     multiple: true,",
				"     broadcast: 'right')~> getDimServiceKey",
				"getDimServiceKey, DimMovie lookup(tMovies@MovieIdNK == DimMovie@MovieIdNK,",
				"     multiple: true,",
				"     broadcast: 'auto')~> getDimMovieKey",
				"addCols, calcHashCurrent exists(addCols@dHash == calcHashCurrent@dHash,",
				"     negate:true,",
				"     broadcast: 'auto')~> getNewPurchases",
				"FactOnlinePurchase derive(dHash = sha1(toString(DateKey)+toString(OnlineServiceKey)+toString(MovieKey)+toString(Price)+toString(TransactionId))) ~> calcHashCurrent",
				"addCols aggregate(groupBy(dMonthKey,",
				"          ServiceKey),",
				"     PurchaseAmount = sum(Price),",
				"          PurchaseQuantity = count(TransactionId)) ~> aggregate",
				"getNewPurchases sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          DateKey as integer,",
				"          OnlineServiceKey as integer,",
				"          MovieKey as integer,",
				"          Price as decimal(4,1),",
				"          TransactionId as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          DateKey = dDateKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          MovieKey,",
				"          Price,",
				"          TransactionId",
				"     )) ~> loadFactOnlinePurchase",
				"aggregate sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          MonthKey as integer,",
				"          OnlineServiceKey as integer,",
				"          PurchaseAmount as decimal(10,1),",
				"          PurchaseQuantity as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     preSQLs:['truncate table DataMart.dbo.FactOnlinePurchase_MonthlySnapshot;'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          MonthKey = dMonthKey,",
				"          OnlineServiceKey = ServiceKey,",
				"          PurchaseAmount,",
				"          PurchaseQuantity",
				"     )) ~> loadFactOnlinePurchaseSN"
			]
		}
	}
}